// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  name                 String
  email                String    @unique
  password             String
  is_admin             Boolean   @default(false)
  banned               Boolean   @default(false)
  email_verified_at    DateTime?
  last_login_at        DateTime?
  current_plan_id      Int?
  subscription_ends_at DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  // Relations
  plan                 Plan?     @relation(fields: [current_plan_id], references: [id])
  transactions         Transaction[]
  subscriptions        Subscription[]
  sessions             Session[]
  failed_login_attempts FailedLoginAttempt[]

  @@map("users")
}

model Plan {
  id               Int      @id @default(autoincrement())
  name             String
  price            Float
  duration_in_days Int
  features         Json
  is_popular       Boolean  @default(false)
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  users            User[]
  transactions     Transaction[]
  subscriptions    Subscription[]
  plan_services    PlanService[]

  @@map("plans")
}

model ServiceGroup {
  id         Int      @id @default(autoincrement())
  name       String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  categories ServiceCategory[]

  @@map("service_groups")
}

model ServiceCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  icon_url    String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  group_id    Int
  group       ServiceGroup @relation(fields: [group_id], references: [id])
  services    Service[]

  @@map("service_categories")
}

model Service {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  name         String
  cookie_data  Json
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  category_id  Int
  category     ServiceCategory @relation(fields: [category_id], references: [id])
  plan_services PlanService[]

  @@map("services")
}

// NEW: Plan-Service access matrix
model PlanService {
  id         Int      @id @default(autoincrement())
  plan_id    Int
  service_id Int
  created_at DateTime @default(now())

  // Relations
  plan       Plan    @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  service    Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@unique([plan_id, service_id])
  @@index([plan_id])
  @@index([service_id])
  @@map("plan_services")
}

model Transaction {
  id                      Int       @id @default(autoincrement())
  status                  TransactionStatus @default(pending)
  amount                  Float
  midtrans_order_id       String
  midtrans_transaction_id String?
  payment_type            String?
  redirect_url            String?
  metadata                Json?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt

  // Relations
  user_id                 String
  user                    User @relation(fields: [user_id], references: [id])
  plan_id                 Int
  plan                    Plan @relation(fields: [plan_id], references: [id])
  invoice                 Invoice?

  @@map("transactions")
}

model Invoice {
  id                  Int      @id @default(autoincrement())
  transaction_id      Int      @unique
  transaction         Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  // Plan snapshot data
  plan_name           String
  plan_price          Float
  plan_duration_days  Int

  // Payment details
  payment_method      String?
  payment_gateway     String?
  payment_type        String?

  // Financial details
  discount_amount     Float    @default(0)
  tax_amount          Float    @default(0)
  final_amount        Float

  // User snapshot data
  user_name           String
  user_email          String

  // Metadata
  metadata            Json?
  created_at          DateTime @default(now())

  @@map("invoices")
}

model Subscription {
  id         Int                @id @default(autoincrement())
  status     SubscriptionStatus @default(active)
  starts_at  DateTime
  ends_at    DateTime
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  // Relations
  user_id    String             @unique
  user       User               @relation(fields: [user_id], references: [id])
  plan_id    Int
  plan       Plan               @relation(fields: [plan_id], references: [id])

  @@map("subscriptions")
}

model Session {
  id                Int      @id @default(autoincrement())
  token             String   @db.VarChar(512)
  device_info       Json?
  ip_address        String
  last_activity_at  DateTime
  expires_at        DateTime
  created_at        DateTime @default(now())

  // Relations
  user_id           String
  user              User @relation(fields: [user_id], references: [id])

  @@index([token])
  @@map("sessions")
}

model FailedLoginAttempt {
  id          Int      @id @default(autoincrement())
  ip_address  String
  attempted_at DateTime @default(now())

  // Relations
  user_id     String
  user        User @relation(fields: [user_id], references: [id])

  @@map("failed_login_attempts")
}

enum TransactionStatus {
  pending
  success
  failed
  expired
}

enum SubscriptionStatus {
  active
  expired
  cancelled
}